// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const cancelReservation = `-- name: CancelReservation :exec
DELETE FROM reservations
WHERE id = ? AND user_id = ?
`

type CancelReservationParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) CancelReservation(ctx context.Context, arg CancelReservationParams) error {
	_, err := q.db.ExecContext(ctx, cancelReservation, arg.ID, arg.UserID)
	return err
}

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (user_id, token, expires_at)
VALUES (?, ?, ?)
ON DUPLICATE KEY UPDATE token = VALUES(token), expires_at = VALUES(expires_at), created_at = CURRENT_TIMESTAMP
`

type CreateRefreshTokenParams struct {
	UserID    int32
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const createReservation = `-- name: CreateReservation :exec
INSERT INTO reservations (user_id, store_id, visit_date)
VALUES (?, ?, ?)
`

type CreateReservationParams struct {
	UserID    int32
	StoreID   int32
	VisitDate time.Time
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) error {
	_, err := q.db.ExecContext(ctx, createReservation, arg.UserID, arg.StoreID, arg.VisitDate)
	return err
}

const createStore = `-- name: CreateStore :exec
INSERT INTO stores (name, address, business_start_time, business_end_time, details)
VALUES (?, ?, ?, ?, ?)
`

type CreateStoreParams struct {
	Name              string
	Address           string
	BusinessStartTime time.Time
	BusinessEndTime   time.Time
	Details           sql.NullString
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) error {
	_, err := q.db.ExecContext(ctx, createStore,
		arg.Name,
		arg.Address,
		arg.BusinessStartTime,
		arg.BusinessEndTime,
		arg.Details,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (email, name, password_hash, role)
VALUES (?, ?, ?, 'general')
`

type CreateUserParams struct {
	Email        string
	Name         string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Email, arg.Name, arg.PasswordHash)
	return err
}

const deleteRefreshTokenByUserID = `-- name: DeleteRefreshTokenByUserID :exec
DELETE FROM refresh_tokens
WHERE user_id = ?
`

func (q *Queries) DeleteRefreshTokenByUserID(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenByUserID, userID)
	return err
}

const deleteReservationAsAdmin = `-- name: DeleteReservationAsAdmin :exec
DELETE FROM reservations
WHERE id = ?
`

func (q *Queries) DeleteReservationAsAdmin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteReservationAsAdmin, id)
	return err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE id = ?
`

func (q *Queries) DeleteStore(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const getAllReservations = `-- name: GetAllReservations :many
SELECT id, user_id, store_id, visit_date, reserved_at FROM reservations
ORDER BY visit_date DESC
`

func (q *Queries) GetAllReservations(ctx context.Context) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, getAllReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StoreID,
			&i.VisitDate,
			&i.ReservedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllReservationsWithStoreNameAndUserName = `-- name: GetAllReservationsWithStoreNameAndUserName :many
SELECT
  r.id AS id,
  r.user_id AS user_id,
  r.store_id AS store_id,
  r.visit_date AS visit_date,
  r.reserved_at AS reserved_at,
  s.name AS store_name,
  u.name AS user_name
FROM
  reservations r
JOIN
  stores s ON r.store_id = s.id
JOIN
  users u ON r.user_id = u.id
ORDER BY
  r.visit_date DESC
`

type GetAllReservationsWithStoreNameAndUserNameRow struct {
	ID         int32
	UserID     int32
	StoreID    int32
	VisitDate  time.Time
	ReservedAt time.Time
	StoreName  string
	UserName   string
}

func (q *Queries) GetAllReservationsWithStoreNameAndUserName(ctx context.Context) ([]GetAllReservationsWithStoreNameAndUserNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllReservationsWithStoreNameAndUserName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReservationsWithStoreNameAndUserNameRow
	for rows.Next() {
		var i GetAllReservationsWithStoreNameAndUserNameRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StoreID,
			&i.VisitDate,
			&i.ReservedAt,
			&i.StoreName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllStores = `-- name: GetAllStores :many
SELECT id, name, address, business_start_time, business_end_time, details, created_at FROM stores
`

func (q *Queries) GetAllStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, getAllStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.BusinessStartTime,
			&i.BusinessEndTime,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshTokenByUserID = `-- name: GetRefreshTokenByUserID :one
SELECT id, user_id, token, expires_at, created_at FROM refresh_tokens
WHERE user_id = ?
`

func (q *Queries) GetRefreshTokenByUserID(ctx context.Context, userID int32) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByUserID, userID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getReservationByID = `-- name: GetReservationByID :one
SELECT id, user_id, store_id, visit_date, reserved_at FROM reservations
WHERE id = ?
`

func (q *Queries) GetReservationByID(ctx context.Context, id int32) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservationByID, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StoreID,
		&i.VisitDate,
		&i.ReservedAt,
	)
	return i, err
}

const getReservationsByStoreAndDate = `-- name: GetReservationsByStoreAndDate :many
SELECT id, user_id, store_id, visit_date, reserved_at FROM reservations
WHERE store_id = ? AND DATE(visit_date) = ?
`

type GetReservationsByStoreAndDateParams struct {
	StoreID   int32
	VisitDate time.Time
}

func (q *Queries) GetReservationsByStoreAndDate(ctx context.Context, arg GetReservationsByStoreAndDateParams) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, getReservationsByStoreAndDate, arg.StoreID, arg.VisitDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StoreID,
			&i.VisitDate,
			&i.ReservedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReservationsByUser = `-- name: GetReservationsByUser :many
SELECT id, user_id, store_id, visit_date, reserved_at FROM reservations
WHERE user_id = ?
ORDER BY visit_date DESC
`

func (q *Queries) GetReservationsByUser(ctx context.Context, userID int32) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, getReservationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StoreID,
			&i.VisitDate,
			&i.ReservedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReservationsWithStoreNameByUser = `-- name: GetReservationsWithStoreNameByUser :many
SELECT
  r.id AS id,
  r.user_id AS user_id,
  r.store_id AS store_id,
  r.visit_date AS visit_date,
  r.reserved_at AS reserved_at,
  s.name AS store_name
FROM
  reservations r
JOIN
  stores s ON r.store_id = s.id
WHERE
  r.user_id = ?
ORDER BY
  r.visit_date DESC
`

type GetReservationsWithStoreNameByUserRow struct {
	ID         int32
	UserID     int32
	StoreID    int32
	VisitDate  time.Time
	ReservedAt time.Time
	StoreName  string
}

func (q *Queries) GetReservationsWithStoreNameByUser(ctx context.Context, userID int32) ([]GetReservationsWithStoreNameByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getReservationsWithStoreNameByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReservationsWithStoreNameByUserRow
	for rows.Next() {
		var i GetReservationsWithStoreNameByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StoreID,
			&i.VisitDate,
			&i.ReservedAt,
			&i.StoreName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStoreByID = `-- name: GetStoreByID :one
SELECT id, name, address, business_start_time, business_end_time, details, created_at FROM stores
WHERE id = ?
`

func (q *Queries) GetStoreByID(ctx context.Context, id int32) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStoreByID, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.BusinessStartTime,
		&i.BusinessEndTime,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, password_hash, role, created_at
FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, password_hash, role, created_at FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const updateStore = `-- name: UpdateStore :exec
UPDATE stores
SET name = ?, address = ?, business_start_time = ?, business_end_time = ?, details = ?
WHERE id = ?
`

type UpdateStoreParams struct {
	Name              string
	Address           string
	BusinessStartTime time.Time
	BusinessEndTime   time.Time
	Details           sql.NullString
	ID                int32
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) error {
	_, err := q.db.ExecContext(ctx, updateStore,
		arg.Name,
		arg.Address,
		arg.BusinessStartTime,
		arg.BusinessEndTime,
		arg.Details,
		arg.ID,
	)
	return err
}
